--- core-functions.sh	2024-07-20 20:06:41.996062136 +0300
+++ core-functions.sh.new	2025-03-17 09:24:19.000000000 +0200
@@ -31,17 +31,6 @@
 }
 trap 'cleanup' 2 14 15 		# trap CTRL+C and kill
 
-# Define which version of gnupg to use. We'll prefer gpg1 since it has fewer
-# dependencies, then gpg2, and if we don't find that we'll blindly set this
-# to gpg and deal with it later.
-if which gpg1 > /dev/null 2> /dev/null ; then
-  GPG=gpg1
-elif which gpg2 > /dev/null 2> /dev/null ; then
-  GPG=gpg2
-else
-  GPG=gpg
-fi
-
 # This create an spinning bar
 spinning() {
 	local WAITFILE
@@ -75,6 +64,12 @@
 	# Create $WORKDIR just in case
 	mkdir -p "${WORKDIR}"
 
+	# Set the "current" flag if system is running Slackware Current
+	if [ -n "$(echo $SLACKWARE_VERSION | sed -ne 's/.*\(+\|current\)$/\1/pi')" ] && \
+	   [ ! -e ${WORKDIR}/current ]; then
+		touch ${WORKDIR}/current
+	fi
+
 	# Select the command to fetch files and packages from network sources
 	if [ "$DOWNLOADER" = "curl" ]; then
 		DOWNLOADER="curl ${CURLFLAGS} -o"
@@ -171,7 +166,9 @@
 	# ${CONF}/blacklist.
 	[ "$CMD" != update ] && mkregex_blacklist
 
-	SLACKCFVERSION=$(grep "# v[0-9.]\+" $CONF/slackpkg.conf | cut -f2 -dv)
+	if [ -z "${SLACKCFVERSION}" ]; then
+		SLACKCFVERSION=$(grep "# v[0-9.]\+" $CONF/slackpkg.conf | cut -f2 -dv)
+	fi
 	CHECKSUMSFILE=${WORKDIR}/CHECKSUMS.md5
 	KERNELMD5=$(md5sum /boot/vmlinuz 2>/dev/null)
 	DIALOG_MAXARGS=${DIALOG_MAXARGS:-19500}
@@ -199,7 +196,7 @@
 	if [ "$ARCH" = "none" ] && [ "$CMD" != "new-config" ]; then
 		echo -e "\
 \nThe ARCH values in slackpkg.conf are now different. You can remove\n\
-ARCH from there, and slackpkg you use your current ARCH or you can look\n\
+ARCH from there, and slackpkg will use your current ARCH or you can look\n\
 at slackpkg.conf.new or slackpkg.conf manual page to see the new valid\n\
 ARCH values\n"
 		cleanup
@@ -382,11 +379,11 @@
 
 	# Check if gpg is enabled but no GPG command are found.
 	#
-	if ! [ "$(which $GPG 2>/dev/null)" ] && [ "${CHECKGPG}" = "on" ]; then
+	if ! [ "$(which gpg 2>/dev/null)" ] && [ "${CHECKGPG}" = "on" ]; then
 		CHECKGPG=off
 		echo -e "\n\
 gpg package not found!  Please disable GPG in ${CONF}/slackpkg.conf or install\n\
-the gnupg2 package.\n\n\
+the gnupg package.\n\n\
 To disable GPG, edit slackpkg.conf and change the value of the CHECKGPG \n\
 variable to "off" - you can see an example in the original slackpkg.conf.new\n\
 file distributed with slackpkg.\n"
@@ -395,7 +392,7 @@
 
 	# Check if the Slackware GPG key are found in the system
 	#                                                       
-	GPGFIRSTTIME="$($GPG --list-keys \"$SLACKKEY\" 2>/dev/null \
+	GPGFIRSTTIME="$(gpg --list-keys \"$SLACKKEY\" 2>/dev/null \
 			| grep -c "$SLACKKEY")"
 	if [ "$GPGFIRSTTIME" = "0" ] && \
 		[ "$CMD" != "search" ] && \
@@ -557,7 +554,7 @@
 # Verify the GPG signature of files/packages
 #
 function checkgpg() {
-	$GPG --verify ${1}.asc ${1} 2>/dev/null && echo "1" || echo "0"
+	gpg --verify ${1}.asc ${1} 2>/dev/null && echo "1" || echo "0"
 }
 
 # Fetch $SLACKKEY from a trusted source
@@ -596,8 +593,8 @@
 # Import $SLACKKEY
 function import_gpg_key() {
 	mkdir -p ~/.gnupg
-	$GPG --yes --batch --delete-key "$SLACKKEY" &>/dev/null
-	$GPG --import $TMPDIR/gpgkey &>/dev/null && \
+	gpg --yes --batch --delete-key "$SLACKKEY" &>/dev/null
+	gpg --import $TMPDIR/gpgkey &>/dev/null && \
 	echo -e "\t\t\tSlackware Linux Project's GPG key added"
 }
 
@@ -628,40 +625,80 @@
 # names (lpkg) and packages unique to one or other file (dpkg)
 #
 function listpkgname() {
-	cut -f2 -d\  ${TMPDIR}/pkglist | sort > ${TMPDIR}/spkg	
-	cut -f2 -d\  ${TMPDIR}/tmplist | sort > ${TMPDIR}/lpkg
-	cat ${TMPDIR}/pkglist ${TMPDIR}/tmplist | \
-		cut -f2-6 -d\ |sort | uniq -u | \
-		cut -f1 -d\  | uniq > ${TMPDIR}/dpkg
+    # Generate spkg (mirror package names) and lpkg (local package names)
+    cut -f2 -d\  ${TMPDIR}/pkglist | sort > ${TMPDIR}/spkg
+    cut -f2 -d\  ${TMPDIR}/tmplist | sort > ${TMPDIR}/lpkg
+
+    # Create dpkg (packages unique to one or the other file)
+    cat ${TMPDIR}/pkglist ${TMPDIR}/tmplist | \
+        cut -f2-6 -d\ | sort | uniq -u | \
+        cut -f1 -d\  | uniq | sort > ${TMPDIR}/dpkg
+
+    # Ensure dpkg is sorted for the comm comparison
+    sort ${TMPDIR}/dpkg -o ${TMPDIR}/dpkg
+
+    # Check if the whitelist exists and log its contents for debugging
+    if [ -f $CONF/whitelist ]; then
+        echo "Whitelist found, processing..."  # Log for debugging
+        # Process and append the whitelist to dpkg list
+        while read whitelist_package; do
+            echo "Processing whitelist package: $whitelist_package"  # Log for debugging
+
+            # Check if the package is already in dpkg
+            if grep -q "^$whitelist_package$" ${TMPDIR}/dpkg; then
+                echo "Package $whitelist_package already in dpkg, skipping."
+            else
+                echo "Adding to dpkg: $whitelist_package"  # Log for debugging
+                echo "$whitelist_package" >> ${TMPDIR}/dpkg
+            fi
+        done < $CONF/whitelist
+
+        # Log the contents of dpkg after appending the whitelist
+        echo "Added whitelist:"  # Log for debugging
+    else
+        echo "Whitelist not found."  # Log for debugging
+    fi
+
+    # Ensure dpkg is sorted again after whitelist is added
+    sort ${TMPDIR}/dpkg -o ${TMPDIR}/dpkg
 }
 
 # Create a blacklist of single package names from regexps in original blacklist
 # any sets such as kde/ are converted to single package names in the process
 # the final list will be used by 'applyblacklist' later.
 function mkregex_blacklist() {
-	# Check that we have the files we need
-	if [ ! -f ${WORKDIR}/pkglist ] || [ ! -f ${CONF}/blacklist ];then
-		return 1
-	fi
-
-	# Create tmp blacklist in a more usable format
-	sed -E "s,(^[[:blank:]]+|[[:blank:]]+$),,
-		/(^#|^$)/d
-		s,^, ,
-		s,$, ,
-		s,^ (extra|pasture|patches|slackware(|64)|testing)/ $,^\1 ,
-		s,^ ([^/]+)/ $, \\\./$PKGMAIN/\1\$,
-		" ${CONF}/blacklist > ${TMPDIR}/blacklist.tmp
-
-	# Filter server and local package lists through blacklist
-	( cat ${WORKDIR}/pkglist
-		printf "%s\n" $ROOT/var/log/packages/* |
-			awk -f /usr/libexec/slackpkg/pkglist.awk
-	) | cut -d\  -f1-7 | grep -E -f ${TMPDIR}/blacklist.tmp |
-		awk '{print $2}' | sort -u | sed "s,[+],[+],g
-		s,$,-[^-]+-($ARCH|noarch|fw)-[^-]+,g" > ${TMPDIR}/blacklist
+    # Check that we have the necessary files
+    if [ ! -f ${WORKDIR}/pkglist ] || [ ! -f ${CONF}/blacklist ]; then
+        return 1
+    fi
+
+    # Create a temporary blacklist in a more usable format
+    sed -E "s,(^[[:blank:]]+|[[:blank:]]+$),,
+        /(^#|^$)/d
+        s,^, ,
+        s,$, ,
+        s,^ (extra|pasture|patches|slackware(|64)|testing)/ $,^\1 ,
+        s,^ ([^/]+)/ $, \\\./$PKGMAIN/\1\$,
+        " ${CONF}/blacklist > ${TMPDIR}/blacklist.tmp
+
+    # Filter server and local package lists through blacklist
+    ( cat ${WORKDIR}/pkglist
+      printf "%s\n" $ROOT/var/log/packages/* |
+        awk -f /usr/libexec/slackpkg/pkglist.awk
+    ) | cut -d\  -f1-7 | grep -E -f ${TMPDIR}/blacklist.tmp |
+        awk '{print $2}' | sort -u | sed "s,[+],[+],g
+        s,$,-[^-]+-($ARCH|noarch|fw)-[^-]+,g" > ${TMPDIR}/blacklist
+
+    # Now exclude whitelist packages from being blacklisted
+    if [ -f ${CONF}/whitelist ]; then
+        while read whitelist_package; do
+            # If the package is in the blacklist, remove it
+            sed -i "/^$whitelist_package-[^a-zA-Z0-9 -]\+/d" ${TMPDIR}/blacklist
+        done < ${CONF}/whitelist
+    fi
 }
 
+
 # Blacklist filter
 #
 function applyblacklist() {
@@ -1144,7 +1181,7 @@
 				rm $TMPDIR/CHECKSUMS.md5
 				rm $TMPDIR/CHECKSUMS.md5.asc
 				echo -e "\
-\n\t\tERROR: Verification of the gpg signature on CHECKSUMS.md5\n\
+\n\t\tERROR: Verification of the  gpg signature on CHECKSUMS.md5\n\
 \t\t       failed! This could mean that the file is out of date\n\
 \t\t       or has been tampered with. If you use mirrors.slackware.com\n\
 \t\t       as your mirror, this could also mean that the mirror to\n\
